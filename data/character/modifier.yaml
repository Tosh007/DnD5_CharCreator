- Wood_Elf_Speed:
    text: "Wood Elf"
    lambda: "35"
- Halfling_speed:
    text: "Halfling"
    lambda: "25"
- Orc_minus2:
    text: "Orc: {0}"
    lambda: "x-2"
- Kobold_minus2:
    text: "Kobold: -2"
    lambda: "x-2"

- Dwarf_speed:
    lambda: "25"
    text: "Dwarf"
- Aarakocra_speed:
    lambda: "25"
    text: "Aarakocra"

- Grung_speed:
    lambda: "25"
    text: "Grung"

- Barbarian_HP:
    lambda: "x+12"
    text: "Barbarian: {2:+d}"
- Bard_HP:
    lambda: "x+8"
    text: "Bard: {2:+d}"
- Cleric_HP:
    lambda: "x+8"
    text: "Cleric: {2:+d}"
- Druid_HP:
    lambda: "x+8"
    text: "Druid: {2:+d}"
- Fighter_HP:
    lambda: "x+10"
    text: "Fighter: {2:+d}"
- Monk_HP:
    lambda: "x+8"
    text: "Monk: {2:+d}"
- Paladin_HP:
    lambda: "x+10"
    text: "Paladin: +10"
- Ranger_HP:
    lambda: "x+10"
    text: "Ranger: +10"
- Rogue_HP:
    lambda: "x+8"
    text: "Rogue: +8"
- Sorcerer_HP:
    lambda: "x+6"
    text: "Sorcerer: +6"
- Warlock_HP:
    lambda: "x+8"
    text: "Warlock: +8"
- warlock_sorcerer_spellcasting_mod:
    lambda: 'x+getValue("proficiencyBonus").get()+getValue("charismaMod").get()'
    text: "warlock & sorcerer: prof bonus + charisma mod"
    dependsOn:
        - proficiencyBonus
        - charismaMod
- warlock_spellSlots:
    lambda: "1"
    text: "1 spell slot at level 1"
    dependsOn:
        - level
- warlock_spellSlotLevel:
    lambda: "1"
    text: spell level 1
    dependsOn":
        - level
- Wizard_HP:
    lambda: "x+6"
    text: "Wizard: {2:+d}"
- Wizard_spellcasting_mod:
    lambda: 'x+getValue("proficiencyBonus").get()+getValue("intelMod").get()'
    text: "wizard: prof bonus + intel mod"
    dependsOn:
        - proficiencyBonus
        - intelMod
- wizard_numPreparedSpells:
    lambda: max(1, getValue("level").get()+getValue("intelMod").get())
    text: "prof bonus + int mod (min 1)"
    dependsOn:
        - level
        - intelMod
- initiative:
    lambda: 'getValue("dextMod").get()'
    text: ""
    order: -1
    dependsOn:
        - dextMod

- strengthMod:
    lambda: '(getValue("strength").get()//2)-5'
    text: "based of strength score"
    order: -1
    dependsOn:
        strength
- dextMod:
    lambda: '(getValue("dexterity").get()//2)-5'
    text: "based of dexterity score"
    order: -1
    dependsOn:
        dexterity
- constMod:
    lambda: '(getValue("constitution").get()//2)-5'
    text: "based of constitution score"
    order: -1
    dependsOn:
        constitution
- intelMod:
    lambda: '(getValue("intelligence").get()//2)-5'
    text: "based of intelligence score"
    order: -1
    dependsOn:
        intelligence
- wisdomMod:
    lambda: '(getValue("wisdom").get()//2)-5'
    text: "based of wisdom score"
    order: -1
    dependsOn:
        wisdom
- charismaMod:
    lambda: '(getValue("charisma").get()//2)-5'
    text: "based of charisma score"
    order: -1
    dependsOn:
        charisma

- maxHitpoints:
    lambda: 'getValue("constMod").get()'
    order: -1
    text: "based on constitution mod"
    dependsOn:
        constMod

- perception_wisdom:
    text: "wis mod + 10"
    lambda: 'x+getValue("wisdomMod").get()+10'
    order: -1
    dependsOn:
        - wisdomMod
- perception_proficient:
    text: "+ prof bonus"
    lambda: 'x+(getValue("proficiencyBonus").get() if getValue("prof_perception").get() else 0)'
    dependsOn:
        - proficiencyBonus
        - prof_perception
- plus1:
    text: "+1"
    lambda: "x+1"
- plus2:
    text: "+2"
    lambda: "x+2"
- plus3:
    text: "+3"
    lambda: "x+3"
# for feats
- Alert:
    text: "Alert"
    lambda: "x+5"
- Athlete:
    text: "Athlete"
    lambda: "x+1"
- Actor:
    text: "Actor"
    lambda: "x+1"
- mobile:
    text: "mobile: +10"
    lambda: "x+10"
    order: 5
- Tough:
    text: "Tough: +2*level ({2})"
    lambda: "x+2*getValue('level').get()"
    dependsOn:
        - level
- Observant_plus5:
    text: "Observant: +5"
    lambda: "x+5"

- AbilityScoreHardCap:
    lambda: "min(20,x)"
    text: "Hardcap at 20"
    order: 8

- armorClassDefault:
    lambda: '10+getValue("dextMod").get()'
    text: "based on dex mod"
    dependsOn:
        - dextMod
- armorClassBarbarian:
    lambda: 'max(x, 10+getValue("dextMod").get()+getValue("constMod").get())'
    text: "barbarian: +dex"
    dependsOn:
        - dextMod
        - constMod
    order: 1
- armorClassMonk:
    lambda: 'max(x, 10+getValue("dextMod").get()+getValue("wisdomMod").get())'
    text: "barbarian: +dex"
    dependsOn:
        - dextMod
        - wisdomMod
    order: 2
- armorClassLizard:
    lambda: 'max(x, 13+getValue("dextMod").get())'
    text: "lizardfolk"
    dependsOn:
        - dextMod
    order: 3
- armorClassSorcer:
    lambda: 'max(x, 13+getValue("dextMod").get())'
    text: "draconic sorcerer"
    dependsOn:
        - dextMod
    order: 4
